<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Item;
use AppBundle\Entity\Shipment;
use AppBundle\Entity\Stock;
use AppBundle\Lib\DbalQueryBuilderHelper;
use AppBundle\Lib\Stock\Form\StockUpRequestDto;
use AppBundle\Lib\Tools;
use Doctrine\DBAL\Query\QueryBuilder;

/**
 * StockRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StockRepository extends \Doctrine\ORM\EntityRepository
{
    public function search(array $filter = [], array $sort = []) :QueryBuilder
    {
        $qb = $this->getEntityManager()->getConnection()->createQueryBuilder();
        $qb->addSelect('s.*, IF(SUM(sm.quantity) > 0, SUM(sm.quantity), 0) AS total_ordered, COUNT(sm.id) AS total_orders')->from('stock', 's')
            ->leftJoin('s', 'shipments', 'sm', 's.item_id = sm.item_id AND s.country_id = sm.country_id AND s.at_date = sm.shipping_date')
            ->groupBy('s.id');

        $qb->andWhere($qb->expr()->orX()->add($qb->expr()->in('sm.state', ':state'))->add($qb->expr()->isNull('sm.state')))
            ->setParameter('state', [Shipment::SHIPMENT_PENDING, Shipment::SHIPMENT_SHIPPED], \Doctrine\DBAL\Connection::PARAM_INT_ARRAY);

        $map = [
            'country' => 's.country_id',
            'item' => 's.item_id',
            'quantity' => 's.quantity',
            'at_date' => 's.at_date',
            'year' => 'YEAR(s.at_date)',
            'month' => 'MONTH(s.at_date)',
        ];

        DbalQueryBuilderHelper::buildFilters($qb, $filter, $map);

        if (array_key_exists('only_current', $filter) && $filter['only_current'] === 1) {
            $from = new \DateTime();
            $from = Tools::getFirstDayDateTimeForMonth($from);

            $filter['from'] = $from;
        }

        if (array_key_exists('from', $filter) && $filter['from'] instanceof \DateTime) {
            $qb->andWhere($qb->expr()->gte('s.at_date', ':from'))->setParameter('from', $filter['from']->format('Y-m-01'));
        }

        if (array_key_exists('until', $filter) && $filter['until'] instanceof \DateTime) {
            $qb->andWhere($qb->expr()->lte('s.at_date', ':until'))->setParameter('until', $filter['until']->format('Y-m-01'));
        }


        $sort_map = [
            'item' => 's.item_id',
            'country' => 's.country_id',
            'at_date' => 's.at_date'
        ];

        $sort_defaults = [
            's.at_date' => 'ASC'
        ];

        return DbalQueryBuilderHelper::buildSort($qb, $sort, $sort_map, $sort_defaults);
    }

    /**
     * Updates the stock with the given values
     *
     * @param int $item
     * @param string $country
     * @param int $quantity
     * @param \DateTime $start
     * @param \DateTime $end
     * @param int $mode
     * @return bool
     * @throws \Doctrine\DBAL\DBALException
     */
    public function stockUp(int $item, string $country, int $quantity, \DateTime $start, \DateTime $end, int $mode = StockUpRequestDto::MODE_REPLACE) :bool
    {
        $sql = 'REPLACE INTO stock (item_id, country_id, at_date, quantity) VALUES(:item_id, :country_id, :at_date, :quantity)';

        if ($mode === StockUpRequestDto::MODE_UPDATE ) {
            $sql = 'INSERT INTO stock (item_id, country_id, at_date, quantity) VALUES(:item_id, :country_id, :at_date, :quantity) ON DUPLICATE KEY UPDATE quantity = :quantity';
        }

        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);

        $params = [
            'item_id' => $item,
            'country_id' => $country,
            'quantity' => $quantity,
            'at_date' => $start->format('Y-m-01 00:00:00')];

        $interval = new \DateInterval('P1M');
        while ($start < $end) {
            $params['at_date'] = $start->format('Y-m-d H:i:s');
            $stmt->execute($params);

            $start->add($interval);
        }

        return true;
    }
}
